(use-package 'testing)

(test "deftype-string"
      (s:deftype "mystring" s:string)
      (set 'x "hello")
      (assert-nil (s:validate mystring x))
      (set 'y 9.0)
      (handler-bind (('wrong-type (lambda (&rest e) "ERROR")))
          (assert-equal (s:validate mystring y) "ERROR"))
      (s:deftype "myconditionalstring" s:string (s:in "x" "y" "z"))
      (handler-bind (('wrong-type (lambda (&rest e) "ERROR")))
                (assert-equal (s:validate myconditionalstring y) "ERROR"))
      (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
                (assert-equal (s:validate myconditionalstring x) "ERROR"))
      (assert-nil (s:validate mystring "x"))
      (assert-nil (s:validate mystring "y"))
)

(test "deftype-int"
    (s:deftype "myint" s:int)
    (assert-nil (s:validate myint 4))
    (handler-bind (('wrong-type (lambda (&rest e) "ERROR")))
                    (assert-equal (s:validate myint "error") "ERROR"))
    (handler-bind (('wrong-type (lambda (&rest e) "ERROR")))
                        (assert-equal (s:validate myint 91.3) "ERROR"))
)

(test "deftype-float"
    (s:deftype "myflt" s:float)
    (assert-nil (s:validate myflt 4.3))
    (handler-bind (('wrong-type (lambda (&rest e) "ERROR")))
                    (assert-equal (s:validate myflt "error") "ERROR"))
    (handler-bind (('wrong-type (lambda (&rest e) "ERROR")))
                        (assert-equal (s:validate myflt 91) "ERROR"))
)

(test "deftype-number"
    (s:deftype "mynum" s:number)
    (assert-nil (s:validate mynum 4.3))
    (assert-nil (s:validate mynum 4))
    (handler-bind (('wrong-type (lambda (&rest e) "ERROR")))
                    (assert-equal (s:validate mynum "error") "ERROR"))
)

(test "deftype-int-positive"
    (s:deftype "myint" s:int (s:positive))
    (assert-nil (s:validate myint 4))
    (handler-bind (('wrong-type (lambda (&rest e) "ERROR")))
                    (assert-equal (s:validate myint "error") "ERROR"))
    (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
                        (assert-equal (s:validate myint -5) "ERROR"))
)

(test "deftype-int-negative"
    (s:deftype "myint" s:int (s:negative))
    (assert-nil (s:validate myint -5))
    (handler-bind (('wrong-type (lambda (&rest e) "ERROR")))
                    (assert-equal (s:validate myint "error") "ERROR"))
    (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
                        (assert-equal (s:validate myint 5) "ERROR"))
)

(test "deftype-int-constrained"
    (s:deftype "myint" s:int (s:gt 4) (s:lte 91))
    (assert-nil (s:validate myint 5))
    (handler-bind (('wrong-type (lambda (&rest e) "ERROR")))
            (assert-equal (s:validate myint "error") "ERROR"))
    (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
            (assert-equal (s:validate myint 93) "ERROR"))
    (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
            (assert-equal (s:validate myint 4) "ERROR"))
)

(test "deftype-int-constrained2"
    (s:deftype "myint" s:int (s:gte 4) (s:lt 91))
    (assert-nil (s:validate myint 5))
    (handler-bind (('wrong-type (lambda (&rest e) "ERROR")))
            (assert-equal (s:validate myint "error") "ERROR"))
    (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
            (assert-equal (s:validate myint 91) "ERROR"))
    (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
            (assert-equal (s:validate myint 3) "ERROR"))
)

(test "deftype-int-constrained3"
    (s:deftype "myint" s:int (s:in 6 7 11))
    (assert-nil (s:validate myint 6))
    (handler-bind (('wrong-type (lambda (&rest e) "ERROR")))
            (assert-equal (s:validate myint "error") "ERROR"))
    (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
            (assert-equal (s:validate myint 8) "ERROR"))
    (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
            (assert-equal (s:validate myint -6) "ERROR"))
)

(test "deftype-array"
    (s:deftype "my4thingarray" s:array (s:len 4))
    (s:deftype "my4to6thingarray" s:array (s:lengte 4) (s:lenlt 7))
    (s:deftype "mystringarray" s:array (s:of s:string))
    (s:deftype "mystringorfunctionarray" s:array (s:of s:string s:fun))
    (assert-nil (s:validate my4thingarray (vector 1 2 3 4)))
    (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
        (assert-equal (s:validate my4thingarray (vector 1 2 3 4 5)) "ERROR"))
    (assert-nil (s:validate my4to6thingarray (vector 1 2 3 4 5)))
    (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
        (assert-equal (s:validate my4thingarray (vector 1 2 3 4 5 6 7)) "ERROR"))
    (assert-nil (s:validate mystringarray (vector "a" "b" "c")))
    (handler-bind (('wrong-type (lambda (&rest e) "ERROR")))
        (assert-equal (s:validate mystringarray (vector 1 2 3 4 5 6 7)) "ERROR"))
    (assert-nil (s:validate mystringorfunctionarray (vector "a" "b" "c" assert-nil)))
    (handler-bind (('wrong-type (lambda (&rest e) "ERROR")))
        (assert-equal (s:validate mystringorfunctionarray (vector 1 2 3 4 5 6 7)) "ERROR"))
)

(test "deftype-map"
    (s:deftype "mymap" s:sorted-map (s:has-key "name" s:string) (s:may-have-key "middle-name" s:string))
    (s:deftype "mymapdone" s:sorted-map (s:has-key "name" s:string) (s:may-have-key "middle-name" s:string) (s:no-other-keys))
    (s:deftype "myint" s:int (s:gt 4))
    (s:deftype "mycomplicatedmap" s:sorted-map (s:has-key "name" s:string) (s:has-key "id" myint) (s:has-key "innermap" mymap))
    (assert-nil (s:validate mymap (sorted-map 'name "Oliver")))
    (assert-nil (s:validate mymap (sorted-map 'name "Oliver" 'middle-name "Wendell")))
    (assert-nil (s:validate mymap (sorted-map 'name "Oliver" 'middle-name "Wendell" 'last-name "Holmes")))
    (assert-nil (s:validate mymapdone (sorted-map 'name "Oliver")))
    (assert-nil (s:validate mymapdone (sorted-map 'name "Oliver" 'middle-name "Wendell")))
    (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
        (assert-equal (s:validate mymapdone (sorted-map 'name "Oliver" 'middle-name "Wendell" 'last-name "Holmes")) "ERROR"))
    (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
        (assert-equal (s:validate mymap (sorted-map 'name "Oliver" 'middle-name 74)) "ERROR"))
    (assert-nil (s:validate mycomplicatedmap (sorted-map 'name "Oliver" 'id 6 'innermap (sorted-map 'name "Oliver" 'middle-name "Wendell"))))
    (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
        (assert-equal (s:validate mycomplicatedmap (sorted-map 'name "Oliver" 'id 6 'innermap "hello"))) "ERROR")
    (handler-bind (('failed-constraint (lambda (&rest e) "ERROR")))
        (assert-equal (s:validate mycomplicatedmap (sorted-map 'name "Oliver" 'id 3 'innermap (sorted-map 'name "Oliver" 'middle-name "Wendell")))) "ERROR")
)