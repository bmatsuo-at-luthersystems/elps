package elpstest

import "testing"

func TestMath(t *testing.T) {
	tests := TestSuite{
		{"arithmetic", TestSequence{
			// arithmetic functions w/o args
			{"(+)", "0"},
			{"(-)", "0"},
			{"(*)", "1"},
			{"(/)", "1"},
			// arithmetic functions w/ one arg
			{"(+ 2)", "2"},
			{"(+ 2.0)", "2"},
			{"(- 2)", "-2"},
			{"(- 2.0)", "-2"},
			{"(* 2)", "2"},
			{"(* 2.0)", "2"},
			{"(/ 2)", "0.5"},
			{"(/ 2.0)", "0.5"},
			// arithmetic functions w/ two args
			{"(* 2 0.75)", "1.5"},
			{"(+ 1 2 3)", "6"},
			{"(+ 1 (* 2 3))", "7"},
			{"(+ 1 1.5)", "2.5"},
			{"(- 0.5 1)", "-0.5"},
			{"(* 2 0.75)", "1.5"},
			{"(** 2 2)", "4"},
			{"(** 2 3)", "8"},
			{"(** 2.0 3.0)", "8"},
			{"(% 2 2)", "0"},
			{"(% 2 3)", "2"},
			{"(% 4 3)", "1"},
			{"(% -1 3)", "-1"},
			{"(% -5 3)", "-2"},
		}},
	}
	RunTestSuite(t, tests)
}

func TestLogic(t *testing.T) {
	tests := TestSuite{
		{"logic", TestSequence{
			{"(not t)", "()"},
			{"(not ())", "t"},
			{"(= 1 1.0)", "t"},
			{"(= 1 1)", "t"},
			{"(= 5 1)", "()"},
			{"(= 5.0 (+ 1 4.0))", "t"},
			{"(< 0 1)", "t"},
			{"(< 0 1.0)", "t"},
			{"(< 1 1)", "()"},
			{"(< 1.0 1)", "()"},
			{"(< 2 1)", "()"},
			{"(< 2.0 1)", "()"},
			{"(<= 0 1)", "t"},
			{"(<= 0 1.0)", "t"},
			{"(<= 1 1)", "t"},
			{"(<= 1.0 1)", "t"},
			{"(<= 2 1)", "()"},
			{"(<= 2.0 1)", "()"},
			{"(> 0.0 1)", "()"},
			{"(> 0 1.0)", "()"},
			{"(> 1 1)", "()"},
			{"(> 1.0 1)", "()"},
			{"(> 2 1)", "t"},
			{"(> 2.0 1)", "t"},
			{"(>= 0.0 1)", "()"},
			{"(>= 0 1.0)", "()"},
			{"(>= 1 1)", "t"},
			{"(>= 1.0 1)", "t"},
			{"(>= 2 1)", "t"},
			{"(>= 2.0 1)", "t"},
		}},
		{"strings", TestSequence{
			{`(string= "" "")`, `t`},
			{`(string= "abc" "abc")`, `t`},
			{`(string= "abc" "ABC")`, `()`},
			{`(string= "abc" (format-string "ab{}" "c"))`, `t`},
			{`(string< "" "abc")`, `t`},
			{`(string< "ABC" "abc")`, `t`},
			{`(string< "a" "z")`, `t`},
			{`(string< "abc" "AABC")`, `()`},
			{`(string< "abc" "abc")`, `()`},
			{`(string<= "" "")`, `t`},
			{`(string<= "abc" "abc")`, `t`},
			{`(string<= "ABC" "abc")`, `t`},
			{`(string<= "abc" "abcdef")`, `t`},
			{`(string<= "abc" "")`, `()`},
			{`(string<= "abc" "ABC")`, `()`},
			{`(string> "abc" "ABC")`, `t`},
			{`(string> "abc" "")`, `t`},
			{`(string> "" "abc")`, `()`},
			{`(string> "" "")`, `()`},
			{`(string> "abc" "abc")`, `()`},
			{`(string>= "" "")`, `t`},
			{`(string>= "abc" "abc")`, `t`},
			{`(string>= "abc" "")`, `t`},
			{`(string>= "abc" "ABC")`, `t`},
			{`(string>= "ABC" "abc")`, `()`},
			{`(string>= "abc" "abcdef")`, `()`},
		}},
		{"equal?", TestSequence{
			{`(equal? () ())`, `t`},
			{`(equal? 2 2)`, `t`},
			{`(equal? 2 3)`, `()`},
			{`(equal? 2 (+ 1 1))`, `t`},
			{`(equal? 2 2.5)`, `()`},
			{`(equal? 2.1 2.5)`, `()`},
			{`(equal? 'a 'a)`, `t`},
			{`(equal? 'a 'b)`, `()`},
			{`(equal? "a" 'a)`, `()`},
			{`(equal? "a" "a")`, `t`},
			{`(equal? "a" "A")`, `()`},
		}},
		{"aggregation", TestSequence{
			{"(max 1)", "1"},
			{"(max 1 -1)", "1"},
			{"(max 1 -1 2 3 -1 0)", "3"},
			{"(min 1)", "1"},
			{"(min 1 -1)", "-1"},
			{"(min -3 -1 2 3 -1 0)", "-3"},
			{"(all? (expr (< % 3)) '(0 -1 2))", "t"},
			{"(all? (expr (< % 3)) '(0 -1 3 2))", "()"},
			{"(any? (expr (> % 3)) '(0 -1 2))", "()"},
			{"(any? (expr (> % 0)) '(0 -1 3 2))", "t"},
		}},
	}
	RunTestSuite(t, tests)
}
